package ru.medwedSA.Java_Core_GB.Seminars.Seminar_3.HomeWork;

/*
 *  Сортировка вставками -> сложность алгоритма O(n^2).
 *  В чём отличие от сортировки выбором? Данная сортировка является "устойчивой".
 *  Это значит, что одинаковые элементы не изменят свой порядок. Одинаковые с точки зрения характеристики,
 *  по которой мы сортируем.
 *  Посмотреть о сортировке вставками тут -> https://www.youtube.com/watch?v=jywoZ2XaQoM
 */

import java.util.Arrays;

public class InsertionSort {

	public static void main(String[] args) {
		int[] arr = {10, 2, 10, 3, 1, 2, 5, 1};
		System.out.println(Arrays.toString(arr));
		insertSort(arr);
		System.out.println(Arrays.toString(arr));
	}

	public static void insertSort(int[] array) { // Сортировка вставкой с помощью цикла for и while (Классический)
		for (int i = 1; i < array.length; i++) {
			int current = array[i]; // Сохраняем значение элемента.
			int j = i; // Заводим переменную равную индексу i.
			while (j > 0 && array[j - 1] > current) { // Пока выполняется хотя-бы одна часть из двух неравенств
				array[j] = array[j - 1]; // Вставляем впереди стоящий элемент на последующею позицию.
				j--; // И снова сдвигаемся на впереди стоящую позицию, элемент в массиве.
			}
			array[j] = current; // Как только цикл while завершился вставляем сохраненное значение на позицию j.
			                    // И снова возвращаемся в цикл for.
		}
	}

//	private static void insertSort(int[] array) { // Сортировка вставкой с помощью двух циклов for:
//		for (int left = 1; left < array.length; left++) {
//			int value = array[left]; // Сохраняем значение элемента.
//			int i = left - 1; // Перемещаем i на предыдущий индекс.
//
//			for (; i >= 0; i--) { // Пока индекс (на который смотрим сейчас) >= 0 - будет выполнятся цикл
//				if (value < array[i]) { // Если сохраненное значение меньшее, то...
//					array[i + 1] = array[i]; // Сохраняем больший элемент на позицию проверяемого (left)
//				} else { // иначе продолжаем движение по массиву в начало.
//					break; // Если вытащенный элемент больше ли равен — останавливаемся
//				}
//			}
//			// Тут важно! Во втором цикле for сработал i--! И мы снова сдвинулись на позицию предыдущего индекса (left - 1)
//			array[i + 1] = value; // И тут записываем, вставляем сохраненное, после первого цикла for значение value.
//		}
//	}
}